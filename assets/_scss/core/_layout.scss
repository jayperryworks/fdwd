/* ============================================================================== */
/* Global layout styles */
/* ============================================================================== */

// CONFIG/MIXINS
// -----------------------------------------------------------------------------

// Quickly set grid-margins on a container across multiple breakpoints
@mixin layout-margins($property: padding, $negative: false, $sides: left right) {
  // grab the first value for default (mobile) screens
  $margins: first($layout-margins);
  
  // make it negative if $negative is set to true
  @if $negative == true {
    $margins: -(first($layout-margins));
  }
  
  // apply to all sides specified
  // -> left and right are defaults
  @each $side in $sides {
    #{$property}-#{$side}: $margins;
  }
  

  @if length($layout-margins) > 1 {
    @for $i from 1 through length($layout-margins) {

      // set up breakpoints for additional values
      @include breakpoint(nth($breakpoints, $i)) {
        
        // make it negative if $negative is set to true
        $margins: nth($layout-margins, $i);
        
        // make it negative if $negative is set to true
        @if $negative == true {
          $margins: -(nth($layout-margins, $i));
        }
        
        // apply to all sides specified
        // -> left and right are defaults
        @each $side in $sides {
          #{$property}-#{$side}: $margins;
        }
      }
    }
  }
}

// A helper to quickly create grid-span() includes across multiple breakpoints
// Saves having to write breakpoint calls over and over again
@mixin grid-span-break($cols, $start, $opts: false) {
  @include grid-span(nth($cols, 1), nth($start, 1), $options: $opts);

  @for $i from 1 through (length($cols) - 1) {
    $num: ($i + 1);
    @include breakpoint(nth($breakpoints, $num)) {
      @include grid-span(nth($cols, $num), nth($start, $num), $options: $opts);
    }
  }
}

@mixin scroll-y {
  overflow: auto;
  overflow-y: auto;
  overflow-x: hidden;
}

/* GLOBAL MODIFIERS */
/* ----------------------------------------------------------------------------- */

%add-gutters {
  padding: 0 ($grid-gutter/2);
}

%max-width {
  margin: 0 auto;
  max-width: ($layout-width + (last($layout-margins) * 2));
}

%full-bleed {
  @include layout-margins(margin, $negative: true);
}

%margins, .margins {
  @include layout-margins(margin);
}

%center, .center {
  text-align: center;
}

%overflow, .overflow {
  overflow: visible;
}

%break, .break {
  @include border(bottom, thin);
  @include rem(margin-bottom, 8px);
  @include rem(padding-bottom, 8px);
}

/* BASE LAYOUTS */
/* ----------------------------------------------------------------------------- */

html {
  width: 100%;
  height: 100%;
}

body {
  min-height: 100%;
  width: 100%;
  overflow: hidden;
  overflow-y: auto;
  overflow-x: hidden;

  @include breakpoint($breakpoint-header) {
    width: auto;
    overflow: auto;
  }
}

[role="main"], .main {
  // @extend %base-transition;
  // @include transform(translateX(0px));
  @include transition(left 0.3s ease);
  @include clearfix;
  position: relative;
  left: 0;
  padding-top: 0;
  padding-bottom: 0;
  // @include layout-margins;

  @include breakpoint($breakpoint-header) {
    margin-left: first($header-w);
    width: calc(100% - #{first($header-w)});
  }

  @include breakpoint($xlarge) {
    margin-left: nth-last($header-w, 2);
    width: calc(100% - #{nth-last($header-w, 2)});
  }
}

/* COMPONENT LAYOUTS */
/* ----------------------------------------------------------------------------- */

/* set up the "open menu" state for mobile screens */
.menu-open {
  [role="main"], [role="banner"].global, footer.global {
    // @include transform(translateX(first($header-w)));
    // @include transition(left 0.3s ease);
    left: first($header-w);
  }

  [role="navigation"].global {
    left: 0;
    // @include transform(translateX(0px));
    @include transition(left 0.3s ease);
  }

  @include breakpoint($breakpoint-header) {
    [role="main"], [role="banner"] {
      left: 0;
    }
  }
}

%wrapper, .wrapper {
  @extend %max-width;
  @include clearfix;
  @include layout-margins;
  display: block;
  position: relative;
  overflow: hidden;
  clear: both;

  &.overflow {
    overflow: visible;
  }
}

/* "feature" blurb on landing page */
/* see hero module for 'overlap' css */
.feature {
  @extend %max-width;
  @include clearfix;
  @include rem(margin-top, -($hero-overlap));
  position: relative;
  z-index: $z--med;

  h1 {
    margin-top: 1em;
  }
}
  .feature-copy {
    @extend %add-gutters;
    margin-bottom: 2em;
    
    @include layout-margins;
    padding-top: $grid-gutter;

    @include breakpoint($small) {
      @include grid-span(3, 1);
    }
  }

  .feature-sidebar {
    @extend %well;
    @include rem(margin-bottom, -36px);
    // @extend %full-bleed;
    // @extend %add-gutters;
    text-align: center;

    @include breakpoint($small) {
      // @extend %theme-reverse;
      @include grid-span(1, 4);
      margin-bottom: 0;
      text-align: left;
      background-color: $color--reverse !important;
    }
    
    padding: $grid-gutter;
    // @include layout-margins;
    padding-top: $grid-gutter;
    // @include rem(padding-top, $grid-gutter);

    & > figure {
      margin: 0;
    }
  }

    .feature-sidebar-thumb {
      display: block;
    }



.map {
  // @extend %full-bleed;
  @include grid-span(4, 1);
  @include rem(margin, 24px 0);
  clear: both;
}

.info {
  @include unstyled-list;
  
  &.contact {
    @include inline-dl(true);

    dt {
      font-weight: bold;
    }
  }

  .inline {
    @include inline-block;
    margin-left: 0.6em;

    &:first-child {
      margin-left: 0;

      &:before {
        content: none;
      }
    }

    &:before {
      content: '\2022';
      position: relative;
      left: -0.4em;
    }
  }
}
